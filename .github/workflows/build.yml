name: Build

on: [ push ]

jobs:
  build:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Parse Changelog Entry
        id: changelog
        uses: coditory/changelog-parser@v1
      - name: Get last version
        id: lasttag
        shell: bash
        run: echo ::set-output name=version::$(git describe --abbrev=0 --tags --match 'v[0-9]*\.[0-9]*\.[0-9]*' | cut -c2-)
      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Cache Gradle
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build with Gradle
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
        run: ./gradlew build jacocoTestReport coveralls --scan
      - name: Publish Reports Artifact
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Reports
          path: build/reports
      - name: Release
        if: "github.ref == 'refs/heads/master' && steps.changelog.outputs.version != steps.lasttag.outputs.version"
        env:
          PREV_VERSION: ${{ steps.lasttag.outputs.version }}
          NEXT_VERSION: ${{ steps.changelog.outputs.version }}
        shell: bash
        run: |
          git config user.name "Coditory CI"
          git config user.email "Coditory CI <admin@coditory.com>"
          if [ -n "$PREV_VERSION" ]; then
            declare -r ESC_PREV_VERSION="${PREV_VERSION//./\\.}"
            sed -i "s|^ *version *= *${ESC_PREV_VERSION} *$|version=${NEXT_VERSION}|" gradle.properties
            sed -i "s|\"${ESC_PREV_VERSION}\"|\"${NEXT_VERSION}\"|" README.md
            sed -i "s|'${ESC_PREV_VERSION}'|'${NEXT_VERSION}'|" README.md
            sed -i "s|v${ESC_PREV_VERSION}|v${NEXT_VERSION}|" README.md
            if [ -n "$(git status --porcelain)" ]; then
               git add -A
               git commit -a -m "Release v${NEXT_VERSION}" -m "[ci-skip]"
               git push origin master
            fi
          fi
          git tag -f "v${NEXT_VERSION}"
          git push origin --tags
      - name: Publish to Gradle Plugin Portal
        if: "github.ref == 'refs/heads/master' && steps.changelog.outputs.version != steps.lasttag.outputs.version"
        env:
          GRADLE_PUBLISH_KEY: ${{ secrets.GRADLE_PUBLISH_KEY }}
          GRADLE_PUBLISH_SECRET: ${{ secrets.GRADLE_PUBLISH_SECRET }}
        run: |
          ./gradlew publishPlugins \
            -Pgradle.publish.key=$GRADLE_PUBLISH_KEY \
            -Pgradle.publish.secret=$GRADLE_PUBLISH_SECRET
      - name: Create GitHub Release
        if: "github.ref == 'refs/heads/master' && steps.changelog.outputs.version != steps.lasttag.outputs.version"
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body: ${{ steps.changelog.outputs.description }}
          tag_name: v${{ steps.changelog.outputs.version }}
          release_name: Release v${{ steps.changelog.outputs.version }}